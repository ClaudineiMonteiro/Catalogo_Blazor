@using W8lessLabs.Blazor.LocalFiles

<div>
    <label>@Label</label>
    <div>
        <button type="button" @onclick="SelecionarImagem">Selecionar Imagem</button>
        <FileSelect @ref="imagemSelecaoArquivo" Accept=".jpg,.jpeg,.png"></FileSelect>
    </div>
</div>
<div>
    @if (imagemBase64 != null)
    {
        <div>
            <div>
                <div style="margin:10px;">
                    <img src="data:image/jpeg;base64, @imagemBase64" stype="width: 150px;"/>
                 </div>
            </div>
        </div>
    }
    @if (ImagemRemota != null)
    {
        <div>
            <div>
                <img src="@ImagemRemota" style="width: 150px;"/>
                <img src="data:image/jpeg;base64, @ImagemRemota" style="width: 150px;"/>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string Label { get; set; } = "Imagem";
    [Parameter] public string ImagemRemota { get; set; }
    [Parameter] public EventCallback<string> ImagemSelecionada { get; set; }

    private string imagemBase64;
    private FileSelect imagemSelecaoArquivo;

    private void SelecionarImagem()
    {
        imagemSelecaoArquivo.SelectFiles();
    }


    private async Task ImagemArquivoSelecionado(SelectedFile[] arquivosSelecionados)
    {
        var arquivoSelecionado = arquivosSelecionados.FirstOrDefault();

        using (var fileReader = await imagemSelecaoArquivo.OpenFileStreamAsync(arquivoSelecionado.Name))
        {
            byte[] buff = null;
            BinaryReader br = new BinaryReader(fileReader);
            long numBytes = new FileInfo(arquivoSelecionado.Name).Length;
            buff = br.ReadBytes((int) numBytes);
            imagemBase64 = Convert.ToBase64String(buff);
            await ImagemSelecionada.InvokeAsync(imagemBase64);
            ImagemRemota = null;
            StateHasChanged();
        }

    }
}
