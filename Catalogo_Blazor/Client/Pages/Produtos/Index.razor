@page "/produto"
@using System.Text.Json
@inject HttpClient http
@inject NavigationManager navigation

<h2>Produtos</h2>

<AuthorizeView Roles="Admin">
    <Authorized>
        <div>
            <a class="btn btn-success" href="produto/create">Novo Produto</a>
        </div>
    </Authorized>
    <NotAuthorized>
        <h2>Somente usuário Admin pode incluir um produto</h2>
    </NotAuthorized>
</AuthorizeView>


<br />

<form class="row gx-3 gy-2 align-items-center">
  <div class="col-sm-3">
    <input type="text" class="form-control mb-2 mr-sm-2" @bind="nomeFiltro" placeholder="Filtrar pelo nome"/>
  </div>
  <div class="col-sm-3">
    <button type="button" class="btn btn-primary mr-sm-2 mb-2" @onclick="Filtrar">Filtrar</button>
    <button type="button" class="btn btn-danger mb-2" @onclick="LimparFiltro">Limpar</button>
  </div>  
</form>

@if (produtos == null)
{
    <p><em>Carregando</em></p>
}
else if (produtos.Count == 0)
{
    <p><em>Não existem produtos cadastrados....</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Produto</th>
                <th>Descrição</th>
                <th>Preço</th>
                <th>Editar</th>
                <th>Deleta</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var produto in produtos)
            {
                <tr>
                    <td>@produto.Nome</td>
                    <td>@produto.Descricao</td>
                    <td>@produto.Preco</td>
                    <td><a class="btn btn-primary" href="produto/edit/@produto.ProdutoId">Editar</a></td>
                    <td><a class="btn btn-danger" @onclick="@(()=> DeletarProduto(produto.ProdutoId))">Deletar</a></td>
                </tr>
            }
        </tbody>
    </table>
}
<br />

<ConfirmaExclusao @ref="confirma" onCancela="@CancelaConfirma" onConfirma="@DeletaConfirma">
    <div>Deseja realamente excluir esta produto?</div>
</ConfirmaExclusao>

<Paginacao QuantidadeTotalPaginas="QuantidadeTotalPaginas" PaginaAtual="PaginaAtual" Raio="2" PaginaSelecionada="PaginaSelecionada">

</Paginacao>


@code {
    List<Produto> produtos { get; set; } = new List<Produto>();
    ConfirmaExclusao confirma = new ConfirmaExclusao();
    int codigoProduto;
    private string nomeFiltro = string.Empty;

    private int QuantidadeTotalPaginas;
    private int PaginaAtual = 1;

    protected override async Task OnInitializedAsync()
    {
        await CarregaProdutos();
    }

    private async Task PaginaSelecionada(int pagina)
    {
        PaginaAtual = pagina;
        await CarregaProdutos(pagina);
    }

    private async Task CarregaProdutos(int pagina = 1, int quantidadePorPagina = 5)
    {
        var address = $"api/produto?pagina={pagina}&quantidadePorPagina={quantidadePorPagina}&nome={(string.IsNullOrEmpty(nomeFiltro) ? "***" : nomeFiltro)}";
        var httpResponse = await http.GetAsync(address);
        if (httpResponse.IsSuccessStatusCode)
        {
            QuantidadeTotalPaginas = int.Parse(httpResponse.Headers.GetValues("totalPaginas").FirstOrDefault() ?? "1");
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            produtos = JsonSerializer.Deserialize<List<Produto>>(responseString, new JsonSerializerOptions() { PropertyNameCaseInsensitive = true});
        }       
    }

     private async Task Filtrar()
    {
        PaginaAtual = 1;
        await CarregaProdutos();
    }

    private async Task LimparFiltro()
    {
        nomeFiltro = string.Empty;
        PaginaAtual = 1;
        await CarregaProdutos();
    }

    void DeletarProduto(int produtoId)
    {
        confirma.Exibir();
        codigoProduto = produtoId;
    }

    void CancelaConfirma()
    {
        confirma.Ocultar();
    }

    async Task DeletaConfirma()
    {
        await http.DeleteAsync($"api/produto/{codigoProduto}");
        confirma.Ocultar();
        await CarregaProdutos();
    }
}
